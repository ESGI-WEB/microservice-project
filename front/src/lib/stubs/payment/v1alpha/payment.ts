// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "payment/v1alpha/payment.proto" (package "payment.v1alpha", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../../google/protobuf/timestamp";
/**
 * @generated from protobuf message payment.v1alpha.Order
 */
export interface Order {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: int32 userId = 2;
     */
    userId: number;
    /**
     * @generated from protobuf field: int32 productId = 3;
     */
    productId: number;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp createdAt = 4;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp updatedAt = 5;
     */
    updatedAt?: Timestamp;
    /**
     * @generated from protobuf field: repeated payment.v1alpha.Item items = 6;
     */
    items: Item[];
}
/**
 * @generated from protobuf message payment.v1alpha.Item
 */
export interface Item {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: int32 productId = 2;
     */
    productId: number;
    /**
     * @generated from protobuf field: int32 quantity = 3;
     */
    quantity: number;
}
/**
 * @generated from protobuf message payment.v1alpha.ItemCreate
 */
export interface ItemCreate {
    /**
     * @generated from protobuf field: int32 productId = 2;
     */
    productId: number;
    /**
     * @generated from protobuf field: int32 quantity = 3;
     */
    quantity: number;
}
/**
 * @generated from protobuf message payment.v1alpha.GetOrderRequest
 */
export interface GetOrderRequest {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
}
/**
 * @generated from protobuf message payment.v1alpha.GetOrderResponse
 */
export interface GetOrderResponse {
    /**
     * @generated from protobuf field: payment.v1alpha.Order order = 1;
     */
    order?: Order;
}
/**
 * @generated from protobuf message payment.v1alpha.CreateOrderRequest
 */
export interface CreateOrderRequest {
    /**
     * @generated from protobuf field: repeated payment.v1alpha.ItemCreate items = 1;
     */
    items: ItemCreate[];
}
/**
 * @generated from protobuf message payment.v1alpha.CreateOrderResponse
 */
export interface CreateOrderResponse {
    /**
     * @generated from protobuf field: payment.v1alpha.Order order = 1;
     */
    order?: Order;
}
/**
 * @generated from protobuf message payment.v1alpha.UpdateOrderRequest
 */
export interface UpdateOrderRequest {
    /**
     * @generated from protobuf field: payment.v1alpha.Order order = 1;
     */
    order?: Order;
}
/**
 * @generated from protobuf message payment.v1alpha.UpdateOrderResponse
 */
export interface UpdateOrderResponse {
    /**
     * @generated from protobuf field: payment.v1alpha.Order order = 1;
     */
    order?: Order;
}
/**
 * @generated from protobuf message payment.v1alpha.DeleteOrderRequest
 */
export interface DeleteOrderRequest {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
}
/**
 * @generated from protobuf message payment.v1alpha.DeleteOrderResponse
 */
export interface DeleteOrderResponse {
    /**
     * @generated from protobuf field: payment.v1alpha.Order order = 1;
     */
    order?: Order;
}
// @generated message type with reflection information, may provide speed optimized methods
class Order$Type extends MessageType<Order> {
    constructor() {
        super("payment.v1alpha.Order", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "userId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "productId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "createdAt", kind: "message", T: () => Timestamp },
            { no: 5, name: "updatedAt", kind: "message", T: () => Timestamp },
            { no: 6, name: "items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Item }
        ]);
    }
    create(value?: PartialMessage<Order>): Order {
        const message = { id: 0, userId: 0, productId: 0, items: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Order>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Order): Order {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* int32 userId */ 2:
                    message.userId = reader.int32();
                    break;
                case /* int32 productId */ 3:
                    message.productId = reader.int32();
                    break;
                case /* google.protobuf.Timestamp createdAt */ 4:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* google.protobuf.Timestamp updatedAt */ 5:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                case /* repeated payment.v1alpha.Item items */ 6:
                    message.items.push(Item.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Order, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* int32 userId = 2; */
        if (message.userId !== 0)
            writer.tag(2, WireType.Varint).int32(message.userId);
        /* int32 productId = 3; */
        if (message.productId !== 0)
            writer.tag(3, WireType.Varint).int32(message.productId);
        /* google.protobuf.Timestamp createdAt = 4; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp updatedAt = 5; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated payment.v1alpha.Item items = 6; */
        for (let i = 0; i < message.items.length; i++)
            Item.internalBinaryWrite(message.items[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message payment.v1alpha.Order
 */
export const Order = new Order$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Item$Type extends MessageType<Item> {
    constructor() {
        super("payment.v1alpha.Item", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "productId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "quantity", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Item>): Item {
        const message = { id: 0, productId: 0, quantity: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Item>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Item): Item {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* int32 productId */ 2:
                    message.productId = reader.int32();
                    break;
                case /* int32 quantity */ 3:
                    message.quantity = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Item, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* int32 productId = 2; */
        if (message.productId !== 0)
            writer.tag(2, WireType.Varint).int32(message.productId);
        /* int32 quantity = 3; */
        if (message.quantity !== 0)
            writer.tag(3, WireType.Varint).int32(message.quantity);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message payment.v1alpha.Item
 */
export const Item = new Item$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ItemCreate$Type extends MessageType<ItemCreate> {
    constructor() {
        super("payment.v1alpha.ItemCreate", [
            { no: 2, name: "productId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "quantity", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ItemCreate>): ItemCreate {
        const message = { productId: 0, quantity: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ItemCreate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ItemCreate): ItemCreate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 productId */ 2:
                    message.productId = reader.int32();
                    break;
                case /* int32 quantity */ 3:
                    message.quantity = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ItemCreate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 productId = 2; */
        if (message.productId !== 0)
            writer.tag(2, WireType.Varint).int32(message.productId);
        /* int32 quantity = 3; */
        if (message.quantity !== 0)
            writer.tag(3, WireType.Varint).int32(message.quantity);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message payment.v1alpha.ItemCreate
 */
export const ItemCreate = new ItemCreate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetOrderRequest$Type extends MessageType<GetOrderRequest> {
    constructor() {
        super("payment.v1alpha.GetOrderRequest", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetOrderRequest>): GetOrderRequest {
        const message = { id: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetOrderRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetOrderRequest): GetOrderRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetOrderRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message payment.v1alpha.GetOrderRequest
 */
export const GetOrderRequest = new GetOrderRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetOrderResponse$Type extends MessageType<GetOrderResponse> {
    constructor() {
        super("payment.v1alpha.GetOrderResponse", [
            { no: 1, name: "order", kind: "message", T: () => Order }
        ]);
    }
    create(value?: PartialMessage<GetOrderResponse>): GetOrderResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetOrderResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetOrderResponse): GetOrderResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* payment.v1alpha.Order order */ 1:
                    message.order = Order.internalBinaryRead(reader, reader.uint32(), options, message.order);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetOrderResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* payment.v1alpha.Order order = 1; */
        if (message.order)
            Order.internalBinaryWrite(message.order, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message payment.v1alpha.GetOrderResponse
 */
export const GetOrderResponse = new GetOrderResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateOrderRequest$Type extends MessageType<CreateOrderRequest> {
    constructor() {
        super("payment.v1alpha.CreateOrderRequest", [
            { no: 1, name: "items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ItemCreate }
        ]);
    }
    create(value?: PartialMessage<CreateOrderRequest>): CreateOrderRequest {
        const message = { items: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateOrderRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateOrderRequest): CreateOrderRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated payment.v1alpha.ItemCreate items */ 1:
                    message.items.push(ItemCreate.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateOrderRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated payment.v1alpha.ItemCreate items = 1; */
        for (let i = 0; i < message.items.length; i++)
            ItemCreate.internalBinaryWrite(message.items[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message payment.v1alpha.CreateOrderRequest
 */
export const CreateOrderRequest = new CreateOrderRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateOrderResponse$Type extends MessageType<CreateOrderResponse> {
    constructor() {
        super("payment.v1alpha.CreateOrderResponse", [
            { no: 1, name: "order", kind: "message", T: () => Order }
        ]);
    }
    create(value?: PartialMessage<CreateOrderResponse>): CreateOrderResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateOrderResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateOrderResponse): CreateOrderResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* payment.v1alpha.Order order */ 1:
                    message.order = Order.internalBinaryRead(reader, reader.uint32(), options, message.order);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateOrderResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* payment.v1alpha.Order order = 1; */
        if (message.order)
            Order.internalBinaryWrite(message.order, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message payment.v1alpha.CreateOrderResponse
 */
export const CreateOrderResponse = new CreateOrderResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateOrderRequest$Type extends MessageType<UpdateOrderRequest> {
    constructor() {
        super("payment.v1alpha.UpdateOrderRequest", [
            { no: 1, name: "order", kind: "message", T: () => Order }
        ]);
    }
    create(value?: PartialMessage<UpdateOrderRequest>): UpdateOrderRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateOrderRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateOrderRequest): UpdateOrderRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* payment.v1alpha.Order order */ 1:
                    message.order = Order.internalBinaryRead(reader, reader.uint32(), options, message.order);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateOrderRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* payment.v1alpha.Order order = 1; */
        if (message.order)
            Order.internalBinaryWrite(message.order, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message payment.v1alpha.UpdateOrderRequest
 */
export const UpdateOrderRequest = new UpdateOrderRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateOrderResponse$Type extends MessageType<UpdateOrderResponse> {
    constructor() {
        super("payment.v1alpha.UpdateOrderResponse", [
            { no: 1, name: "order", kind: "message", T: () => Order }
        ]);
    }
    create(value?: PartialMessage<UpdateOrderResponse>): UpdateOrderResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateOrderResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateOrderResponse): UpdateOrderResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* payment.v1alpha.Order order */ 1:
                    message.order = Order.internalBinaryRead(reader, reader.uint32(), options, message.order);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateOrderResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* payment.v1alpha.Order order = 1; */
        if (message.order)
            Order.internalBinaryWrite(message.order, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message payment.v1alpha.UpdateOrderResponse
 */
export const UpdateOrderResponse = new UpdateOrderResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteOrderRequest$Type extends MessageType<DeleteOrderRequest> {
    constructor() {
        super("payment.v1alpha.DeleteOrderRequest", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteOrderRequest>): DeleteOrderRequest {
        const message = { id: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteOrderRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteOrderRequest): DeleteOrderRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteOrderRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message payment.v1alpha.DeleteOrderRequest
 */
export const DeleteOrderRequest = new DeleteOrderRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteOrderResponse$Type extends MessageType<DeleteOrderResponse> {
    constructor() {
        super("payment.v1alpha.DeleteOrderResponse", [
            { no: 1, name: "order", kind: "message", T: () => Order }
        ]);
    }
    create(value?: PartialMessage<DeleteOrderResponse>): DeleteOrderResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteOrderResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteOrderResponse): DeleteOrderResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* payment.v1alpha.Order order */ 1:
                    message.order = Order.internalBinaryRead(reader, reader.uint32(), options, message.order);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteOrderResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* payment.v1alpha.Order order = 1; */
        if (message.order)
            Order.internalBinaryWrite(message.order, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message payment.v1alpha.DeleteOrderResponse
 */
export const DeleteOrderResponse = new DeleteOrderResponse$Type();
/**
 * @generated ServiceType for protobuf service payment.v1alpha.PaymentCRUDService
 */
export const PaymentCRUDService = new ServiceType("payment.v1alpha.PaymentCRUDService", [
    { name: "GetOrder", options: {}, I: GetOrderRequest, O: GetOrderResponse },
    { name: "CreateOrder", options: {}, I: CreateOrderRequest, O: CreateOrderResponse },
    { name: "UpdateOrder", options: {}, I: UpdateOrderRequest, O: UpdateOrderResponse },
    { name: "DeleteOrder", options: {}, I: DeleteOrderRequest, O: DeleteOrderResponse }
]);
