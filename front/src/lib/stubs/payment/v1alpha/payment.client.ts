// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "payment/v1alpha/payment.proto" (package "payment.v1alpha", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { PaymentCRUDService } from "./payment";
import type { DeleteOrderResponse } from "./payment";
import type { DeleteOrderRequest } from "./payment";
import type { UpdateOrderResponse } from "./payment";
import type { UpdateOrderRequest } from "./payment";
import type { CreateOrderResponse } from "./payment";
import type { CreateOrderRequest } from "./payment";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetOrderResponse } from "./payment";
import type { GetOrderRequest } from "./payment";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service payment.v1alpha.PaymentCRUDService
 */
export interface IPaymentCRUDServiceClient {
    /**
     * @generated from protobuf rpc: GetOrder(payment.v1alpha.GetOrderRequest) returns (payment.v1alpha.GetOrderResponse);
     */
    getOrder(input: GetOrderRequest, options?: RpcOptions): UnaryCall<GetOrderRequest, GetOrderResponse>;
    /**
     * @generated from protobuf rpc: CreateOrder(payment.v1alpha.CreateOrderRequest) returns (payment.v1alpha.CreateOrderResponse);
     */
    createOrder(input: CreateOrderRequest, options?: RpcOptions): UnaryCall<CreateOrderRequest, CreateOrderResponse>;
    /**
     * @generated from protobuf rpc: UpdateOrder(payment.v1alpha.UpdateOrderRequest) returns (payment.v1alpha.UpdateOrderResponse);
     */
    updateOrder(input: UpdateOrderRequest, options?: RpcOptions): UnaryCall<UpdateOrderRequest, UpdateOrderResponse>;
    /**
     * @generated from protobuf rpc: DeleteOrder(payment.v1alpha.DeleteOrderRequest) returns (payment.v1alpha.DeleteOrderResponse);
     */
    deleteOrder(input: DeleteOrderRequest, options?: RpcOptions): UnaryCall<DeleteOrderRequest, DeleteOrderResponse>;
}
/**
 * @generated from protobuf service payment.v1alpha.PaymentCRUDService
 */
export class PaymentCRUDServiceClient implements IPaymentCRUDServiceClient, ServiceInfo {
    typeName = PaymentCRUDService.typeName;
    methods = PaymentCRUDService.methods;
    options = PaymentCRUDService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetOrder(payment.v1alpha.GetOrderRequest) returns (payment.v1alpha.GetOrderResponse);
     */
    getOrder(input: GetOrderRequest, options?: RpcOptions): UnaryCall<GetOrderRequest, GetOrderResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetOrderRequest, GetOrderResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreateOrder(payment.v1alpha.CreateOrderRequest) returns (payment.v1alpha.CreateOrderResponse);
     */
    createOrder(input: CreateOrderRequest, options?: RpcOptions): UnaryCall<CreateOrderRequest, CreateOrderResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateOrderRequest, CreateOrderResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateOrder(payment.v1alpha.UpdateOrderRequest) returns (payment.v1alpha.UpdateOrderResponse);
     */
    updateOrder(input: UpdateOrderRequest, options?: RpcOptions): UnaryCall<UpdateOrderRequest, UpdateOrderResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateOrderRequest, UpdateOrderResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteOrder(payment.v1alpha.DeleteOrderRequest) returns (payment.v1alpha.DeleteOrderResponse);
     */
    deleteOrder(input: DeleteOrderRequest, options?: RpcOptions): UnaryCall<DeleteOrderRequest, DeleteOrderResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteOrderRequest, DeleteOrderResponse>("unary", this._transport, method, opt, input);
    }
}
